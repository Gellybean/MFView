@page "/fetchdata"
@inject HttpClient Http
@using Gellybeans.Pathfinder;
@using Newtonsoft.Json;

<PageTitle>Character</PageTitle>

<h1>Character</h1>

<p>This component demonstrates fetching data from the server.</p>

    
<div class="main">

    <div class="header">
        <img src="asset/PF.png" style="width:400px">
        <div class="character-info" style="width:700px;background-color:aquamarine;bottom:120px;left:400px;position:relative;height:150px;">
            <input type="text" />
        </div>
        
    </div>
    <div class="left">
        <div class="ability-score-container">
            <div style="height:30px;width:60px;" class="black-label"><b>STR</b></div>
            <div style="height:30px;width:60px;" class="black-label"><b>DEX</b></div>
            <div style="height:30px;width:60px;" class="black-label"><b>CON</b></div>
            <div style="height:30px;width:60px;" class="black-label"><b>INT</b></div>
            <div style="height:30px;width:60px;" class="black-label"><b>WIS</b></div>
            <div style="height:30px;width:60px;" class="black-label"><b>CHA</b></div>

            <InputText style="height:30px;width:40px;" class="input-box" ValueExpression="@(() => statBlock.Stats["STR_SCORE"].Value.ToString())" ValueChanged="@((string s) => statBlock.Stats["STR_SCORE"] = int.Parse(s))"></InputText>
        </div>
    </div>

</div>


<style>

    .character-info > input[type=text] {
        border: none;
        border-bottom: 2px solid black;
    }

    .ability-score-container {
        display: flex;
        gap: 5px;
        flex-direction: column;
        flex-wrap: wrap;
        height: 250px;
        width: 300px;
        padding-top: 20px;
    }

    .black-label {     
        color: white;
        background-color: black;
        text-align:center;
        padding-top: 4px;
    }

    .input-box {
        border-width: 1px;

    }


    .main {
        display: grid;
        grid-template-columns: 550px 550px;
        grid-template-rows: 150px auto;
        grid-template-areas:
            "header header"
            "left right";
    }

    .header {
        grid-area: header;
        overflow: hidden;
        background-color: lightblue;
    }

    .left {
        grid-area: left;
    }

    .right {
        grid-area: right;
    }

</style>



@code {
    private StatBlock statBlock = StatBlock.DefaultPathfinder("hehe");

    protected override async Task OnInitializedAsync()
    {

        //var results = await Http.GetStringAsync("https://localhost:7249/Api/character/159057660560277504/Gillespe");
        //var sb = JsonConvert.DeserializeObject<StatBlock>(results);
        //statBlock = sb;
    }

}
