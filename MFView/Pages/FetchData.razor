@page "/"
@inject HttpClient Http
@using Gellybeans.Pathfinder;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;

<style>

    .bonus-header {
        display: flex;
        flex-direction: column;
        align-content: flex-start;
    }

    .bonus-item {
        border: 1px solid rgba(0, 0, 0, 0.2);
        display: flex;
        align-items: center;
        width: 325px;
    }

    .bonus-name {
        padding-top: 4px;
        padding-left: 5px;
        padding-right: 5px;
        height: 30px;
        width: 120px;
    }

    .bonus-label {
        color: white;
        background-color: darkcyan;
        height: 30px;
        width: 175px;
        padding-top: 4px;
        text-align: center;
        border-radius: 10px 3px 3px 10px;
    }

    .bonus-add-button {
        height: 30px;
        width: 30px;
    }

    .bonus-add-container {
        display: flex;
        align-content: flex-start;
        gap: 5px;
        flex-direction: column;
        flex-wrap: wrap;
        padding: 10px;
        width: 340px;
        height: 90px;
        border: 1px solid black;
        background-color: gainsboro;
    }

    .bonus-remove {
        border: 1px solid red;
        padding-top: 4px;
        width: 30px;
        text-align: center;
    }

    .center-stage {
        display: flex;
        align-items: center;
        justify-content: flex-start;
    }

    .character-info > input[type=text] {
        border: none;
        border-bottom: 2px solid black;
    }

    .message-box {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        height: 100px;
        width: 200px;
        border: 2px solid black
    }

    .stat-block {
        display: flex;
        gap: 5px;
        flex-direction: column;
        flex-wrap: wrap;
        align-content: flex-start;
    }

    .stat-details {
        border: 4px solid black;
    }

    .stat-details-main {
        display: flex;
        align-content: flex-start;
        gap: 5px;
        flex-direction: column;
        padding: 5px;
        width: 340px;
        height: 250px;
        background-color: gainsboro;
        border: 1px solid black;
    }


    .stat-cont {
        display: flex;
        gap: 5px;
        flex-direction: row;
        align-content: flex-start
    }

    .top-label {
        justify-content: center;
        display: inline-flex;
        align-self: flex-end
    }

    .black-label {
        color: white;
        background-color: black;
        text-align: center;
        padding-top: 4px;
        border-radius: 3px 10px 10px 3px;
    }

    .skill-label {
        color: white;
        background-color: darkslategray;
        text-align: center;
        padding-top: 1px;
        border-style: double;
        border-radius: 3px 10px 10px 3px;
    }

    .input-box {
        border-width: 1px;
    }


    .main {
        background-color: lightgray;
        display: grid;
        grid-template-columns: 1100px;
        grid-template-rows: 100px 30px 600px;
        grid-template-areas:
            "header"
            "label"
            "stats";
    }

    .header {
        display: flex;
        gap: 10px;
        grid-area: header;
        overflow: hidden;
    }

    .label {
        grid-area: label;
        font-size: small;
    }

    .stats {
        grid-area: stats;
    }

    .sidebar {
        display: flex;
        align-items: flex-start;
        gap: 10px;
        justify-content: center;
        border-left: 2px solid black;
        height: 100vh;
        width: 375px;
        position: absolute;
        top: 0;
        right: 0;
        padding-top: 40px;
        background-color: darkslategray;
        
    }

</style>

<html>
<body>



    <PageTitle>Character</PageTitle>

    @if(statBlock == null)
    {
        <p>@status</p>
    }
    else
    {

        <div class="main">
            <div class="header">
                <img src="asset/PF.png" style="width:300px">
                <div style="width:25px"></div>
                <div>
                    <div style="height:20px"></div>
                    <input @bind="@exprInput" />
                    <button @onclick=@(async () => await SendExpression(exprInput))>Eval</button>
                </div>
            </div>

            <div class="stats">
                <div style="display:flex;height:50px;font-size:small">
                    <div style="width:65px" class="top-label"></div>
                    <div style="width:40px" class="top-label">Score</div>
                    <div style="width:5px" class="top-label"></div>
                    <div style="width:40px" class="top-label">Mod</div>
                    <div style="width:300px" class="top-label"></div>
                    <div style="width:40px" class="top-label">Ranks</div>
                    <div style="width:5px" class="top-label"></div>
                    <div style="width:40px" class="top-label">Total</div>
                </div>
                <div style="display:inline-flex">
                    <div style="height:375px;width:290px">
                        <div style="height:230px;column-gap:20px;" class="stat-block">
                            <div class="stat-cont">
                                <div style="height:30px;width:60px;" class="black-label"><b>STR</b></div>
                                <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["STR_SCORE"].Value)</button>
                                <button style="height:30px;width:40px;" @onclick=@(() => Interact("STR")) class="input-box">@(statBlock.Resolve("STR"))</button>
                            </div>
                            <div class="stat-cont">
                                <div style="height:30px;width:60px;" class="black-label"><b>DEX</b></div>
                                <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["DEX_SCORE"].Value)</button>
                                <button style="height:30px;width:40px;" @onclick=@(() => Interact("DEX"))  class="input-box">@(statBlock.Resolve("DEX"))</button>
                            </div>
                            <div class="stat-cont">
                                <div style="height:30px;width:60px;" class="black-label"><b>CON</b></div>
                                <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["CON_SCORE"].Value)</button>
                                <button style="height:30px;width:40px;" @onclick=@(() => Interact("CON"))  class="input-box">@(statBlock.Resolve("CON"))</button>
                            </div>
                            <div class="stat-cont">
                                <div style="height:30px;width:60px;" class="black-label"><b>INT</b></div>
                                <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["INT_SCORE"].Value)</button>
                                <button style="height:30px;width:40px;" @onclick=@(() => Interact("INT"))  class="input-box">@(statBlock.Resolve("INT"))</button>
                            </div>
                            <div class="stat-cont">
                                <div style="height:30px;width:60px;" class="black-label"><b>WIS</b></div>
                                <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["WIS_SCORE"].Value)</button>
                                <button style="height:30px;width:40px;" @onclick=@(() => Interact("WIS")) class="input-box">@(statBlock.Resolve("WIS"))</button>
                            </div>
                            <div class="stat-cont">
                                <div style="height:30px;width:60px;" class="black-label"><b>CHA</b></div>
                                <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["CHA_SCORE"].Value)</button>
                                <button style="height:30px;width:40px;" @onclick=@(() => Interact("CHA")) class="input-box">@(statBlock.Resolve("CHA"))</button>
                            </div>

                            <div style="height:20px;width:60px;"></div>

                            <div class="stat-cont">
                                <div style="height:30px;width:60px;" class="black-label"><b>HP</b></div>
                                <button style="height:30px;width:40px;" class="input-box">@(statBlock.Resolve("HP"))</button>
                            </div>

                            <div style="height:30px;width:60px;"></div>

                            <div class="stat-cont">
                                <div style="height:30px;width:60px;" class="black-label"><b>INIT</b></div>
                                <button style="height:30px;width:40px;" @onclick=@(() => Interact("INIT")) class="input-box">@(statBlock.Resolve("INIT"))</button>
                            </div>
                            <div class="stat-cont">
                                <div style="height:30px;width:60px;" class="black-label"><b>BAB</b></div>
                                <button style="height:30px;width:40px;" class="input-box">@(statBlock.Resolve("BAB"))</button>
                            </div>
                            <div class="stat-cont">
                                <div style="height:30px;width:60px;" class="black-label"><b>CMB</b></div>
                                <button style="height:30px;width:40px;" @onclick=@(() => Interact("CMB")) class="input-box">@(statBlock.Resolve("CMB"))</button>
                            </div>
                            <div class="stat-cont">
                                <div style="height:30px;width:60px;" class="black-label"><b>CMD</b></div>
                                <button style="height:30px;width:40px;" class="input-box">@(statBlock.Resolve("CMD"))</button>
                            </div>
                        </div>

                        <div style="height:50px"></div>

                        <div style="position:sticky;height:100px;column-gap:25px;" class="stat-block">
                            <div class="stat-cont">
                                <div style="height:30px;width:80px;" class="black-label"><b>FORT</b></div>
                                <button style="height:30px;width:40px;" @onclick=@(() => Interact("FORT")) class="input-box">@(statBlock.Resolve("FORT"))</button>
                            </div>
                            <div class="stat-cont">
                                <div style="height:30px;width:80px;" class="black-label"><b>REF</b></div>
                                <button style="height:30px;width:40px;" @onclick=@(() => Interact("REF")) class="input-box">@(statBlock.Resolve("REF"))</button>
                            </div>
                            <div class="stat-cont">
                                <div style="height:30px;width:80px;" class="black-label"><b>WILL</b></div>
                                <button style="height:30px;width:40px;" @onclick=@(() => Interact("WILL")) class="input-box">@(statBlock.Resolve("WILL"))</button>
                            </div>
                            <div class="stat-cont">
                                <div style="height:30px;width:80px;" class="black-label"><b>AC</b></div>
                                <button style="height:30px;width:40px;" class="input-box">@(statBlock.Resolve("AC"))</button>
                            </div>
                            <div class="stat-cont">
                                <div style="height:30px;width:80px;" class="black-label"><b>TOUCH</b></div>
                                <button style="height:30px;width:40px;" class="input-box">@(statBlock.Resolve("TOUCH"))</button>
                            </div>
                            <div class="stat-cont">
                                <div style="height:30px;width:80px;" class="black-label"><b>FLAT</b></div>
                                <button style="height:30px;width:40px;" class="input-box">@(statBlock.Resolve("FLAT"))</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div style="display:inline-flex;" class="stat-block">

                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Acrobatics</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_ACR"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("ACR")) class="input-box">@(statBlock.Resolve("ACR"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Appraise</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_APR"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("APR")) class="input-box">@(statBlock.Resolve("APR"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Bluff</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_BLF"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("BLF")) class="input-box">@(statBlock.Resolve("BLF"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Climb</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_CLM"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("CLM")) class="input-box">@(statBlock.Resolve("CLM"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Diplomacy</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_DIP"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("DIP")) class="input-box">@(statBlock.Resolve("DIP"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Disable Device</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_DSA"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("DSA")) class="input-box">@(statBlock.Resolve("DSA"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Disguise</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_DSG"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("DSG")) class="input-box">@(statBlock.Resolve("DSG"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Escape Artist</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_ESC"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("ESC")) class="input-box">@(statBlock.Resolve("ESC"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Fly</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_FLY"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("FLY")) class="input-box">@(statBlock.Resolve("FLY"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Handle Animal</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_HND"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("HND")) class="input-box">@(statBlock.Resolve("HND"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Heal</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_HEA"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("HEA")) class="input-box">@(statBlock.Resolve("HEA"))</button>
                    </div>
                </div>
                <div style="display:inline-flex;width:20px;"></div>
                <div style="display:inline-flex" class="stat-block">
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Intimidate</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_ITM"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("ITM")) class="input-box">@(statBlock.Resolve("ITM"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Linguistics</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_LNG"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("LNG")) class="input-box">@(statBlock.Resolve("LNG"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Perception</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_PRC"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("PRC")) class="input-box">@(statBlock.Resolve("PRC"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Ride</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_RDE"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("RDE")) class="input-box">@(statBlock.Resolve("RDE"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Sense Motive</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_SNS"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("SNS")) class="input-box">@(statBlock.Resolve("SNS"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Sleight of Hand</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_SLT"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("SLT")) class="input-box">@(statBlock.Resolve("SLT"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Spellcraft</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_SPL"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("SPL")) class="input-box">@(statBlock.Resolve("SPL"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Stealth</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_STL"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("STL")) class="input-box">@(statBlock.Resolve("STL"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Survival</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_SUR"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("SUR")) class="input-box">@(statBlock.Resolve("SUR"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Swim</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_SWM"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("SWM")) class="input-box">@(statBlock.Resolve("SWM"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Use Magic Device</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_UMD"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("UMD")) class="input-box">@(statBlock.Resolve("UMD"))</button>
                    </div>
                </div>
                <div style="display:inline-flex;width:20px;"></div>
                <div style="display:inline-flex" class="stat-block">
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Arcana</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_ARC"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("ARC")) class="input-box">@(statBlock.Resolve("ARC"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Dungeoneering</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_DUN"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("DUN")) class="input-box">@(statBlock.Resolve("DUN"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Engineering</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_ENG"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("ENG")) class="input-box">@(statBlock.Resolve("ENG"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Geography</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_GEO"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("GEO")) class="input-box">@(statBlock.Resolve("GEO"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>History</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_HIS"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("HIS")) class="input-box">@(statBlock.Resolve("HIS"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Local</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_LCL"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("LCL")) class="input-box">@(statBlock.Resolve("LCL"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Nature</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_NTR"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("NTR")) class="input-box">@(statBlock.Resolve("NTR"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Nobility</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_NBL"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("NBL")) class="input-box">@(statBlock.Resolve("NBL"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Planes</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_PLN"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("PLN")) class="input-box">@(statBlock.Resolve("PLN"))</button>
                    </div>
                    <div class="stat-cont">
                        <div style="height:30px;width:150px;" class="skill-label"><b>Religion</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats["SK_RLG"].Base)</button>
                        <button style="height:30px;width:40px;" @onclick=@(() => Interact("RLG")) class="input-box">@(statBlock.Resolve("RLG"))</button>
                    </div>
                </div>
            </div>
        </div>
        
    }
    <div class="sidebar">
        @if(statBlock != null && statDetailsVisible)
        {
            @(BonusWindow())
        }
    </div>

    @if(currentMessage != "")
    {
        @(MessageBox(currentMessage))
    }

</body>
</html>



@code {

    enum InteractionMode
    {
        Roll,
        Edit
    }

    string status = "Loading...";

    StatBlock statBlock = null!;
    string currentStat = "INT_SCORE";

    bool messageVisible = true;
    string currentMessage = "";

    bool statDetailsVisible = true;
    bool addBonusVisible = true;

    string exprInput = "";

    string exprMod = "1d20";

    InteractionMode mode = InteractionMode.Roll;



    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetStringAsync("http://localhost:5000/Api/character/159057660560277504/");
        var jo = JObject.Parse(response);

        if(jo.ContainsKey("code"))
        {
            status = "Failed.";
            currentMessage = $"{jo.Value<string>("code")}: {jo.Value<string>("body")}";
        }
        else
        {
            var sb = jo.ToObject<StatBlock>();
            statBlock = sb!;
        }       
    }

    async Task SendExpression(string expr)
    {
        var action = new WebAction
        {
            Source = statBlock.Owner,
            Action = "expr",
            Target = expr
        };

        var response = await Http.PostAsJsonAsync<WebAction>("http://localhost:5000/Api/channel/1027722145540870164", action);
    }

    async Task Interact(string statName)
    {
        switch(mode)
        {
            case InteractionMode.Roll:
                await SendExpression($"{exprMod} + {statName}");
                break;
            default:
                break;
        }
    }

    RenderFragment MessageBox(string message)
    {
        return
    @<div class="message-box">
        <div>@message</div>
        <div style="height:25px"></div>
        <button @onclick=@(() =>  currentMessage = "" ) style="width:50px">OK</button>
    </div>;
    }

    RenderFragment BonusWindow()
    {
        return
    @<div class="stat-details">
        <div class="stat-details-main">
            <div class="bonus-header">
                <div style="display:flex">
                    <div style="height:40px;width:297px"><b>@currentStat</b></div>
                    <button @onclick=@(() => statDetailsVisible = !statDetailsVisible) style="height:30px">X</button>
                </div>
                <div style="display:flex">
                    <div style="height:40px;" class="stat-cont">
                        <div style="width:50px;height:30px;" class="black-label"><b>Base</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats[currentStat].Base)</button>
                    </div>
                    <div style="width:25px;"></div>
                    <div class="stat-cont">
                        <div style="width:80px;height:30px;" class="black-label"><b>Override</b></div>
                        <button style="height:30px;width:40px;" class="input-box">@(statBlock.Stats[currentStat].Override != null ? statBlock.Stats[currentStat].Override.Value : 0)</button>
                    </div>
                    <div style="width:50px;"></div>
                    <button @onclick=@(() => addBonusVisible = !addBonusVisible) class="bonus-add-button">+</button>
                </div>
            </div>
            @if(statBlock.Stats.ContainsKey(currentStat))
            {
                @foreach(var bonus in statBlock.Stats[currentStat].Bonuses)
                {
                    <div class="bonus-item">
                        <div class="bonus-name">@(bonus.Name)</div>
                        <div class="bonus-label">@($"{bonus.Value} {Enum.GetName(typeof(BonusType), bonus.Type).ToUpper()}")</div>
                        <div class="bonus-remove">X</div>
                    </div>
                }
            }
            </div>
            @if (addBonusVisible)
            {
                <div class="bonus-add-container">
                    <div class="stat-cont">
                        <div style="width:50px" class="black-label"><b>Name</b></div>
                        <input style="width:200px" />
                    </div>
                    <div class="stat-cont">
                        <div style="width:50px" class="black-label"><b>Value</b></div>
                        <input style="width:40px" />
                        <div style="width:10px;"></div>
                        <select style="width:140px;" name="bonus-type">
                            <option value="Typeless">Typeless</option>
                            <option value="Alchemical">Alchemical</option>
                            <option value="Armor">Armor</option>
                            <option value="Circumstance">Circumstance</option>
                            <option value="Competence">Competence</option>
                            <option value="Deflection">Deflection</option>
                            <option value="Dodge">Dodge</option>
                            <option value="Enhancement">Enhancement</option>
                            <option value="Inherent">Inherent</option>
                            <option value="Insight">Insight</option>
                            <option value="Luck">Luck</option>
                            <option value="Morale">Morale</option>
                            <option value="Natural">Natural</option>
                            <option value="Profane">Profane</option>
                            <option value="Racial">Racial</option>
                            <option value="Resistance">Resistance</option>
                            <option value="Sacred">Sacred</option>
                            <option value="Shield">Shield</option>
                            <option value="Size">Size</option>
                            <option value="Trait">Trait</option>
                            <option value="Penalty">Penalty</option>
                        </select>
                    </div>
                    <button style="width:60px;height:65px;">ADD</button>
                </div>
            }
        </div>;

    }
}
